import React, {
  PureComponent, Component,
} from 'react';
import PropTypes from 'prop-types';
import Svg from 'react-native-svg';
import {
  Animated,
  Dimensions,
  Easing,
} from 'react-native';
import {
  svgPathProperties,
} from 'svg-path-properties';

import Path from '../AnimatedSVG';

export const States = {
  PLAY:0,
  PAUSE:1,
  RESUME:2
}


const { height, width } = Dimensions.get('window');
class AnimatedSVGPath extends Component {
  static propTypes = {
    d: PropTypes.string.isRequired,
    strokeColor: PropTypes.string,
    strokeWidth: PropTypes.number,
    strokeLinecap: PropTypes.string,
    easing: PropTypes.any,
    duration: PropTypes.number,
    height: PropTypes.number,
    delay: PropTypes.number,
    width: PropTypes.number,
    scale: PropTypes.number,
    fill: PropTypes.string,
    loop: PropTypes.bool,
    transform: PropTypes.string,
    reverse: PropTypes.bool,
    state: PropTypes.number,
  };
  
  static defaultProps = {
    strokeColor: "black",
    strokeWidth: 1,
    strokeLinecap: "butt",
    easing: Easing.easeInOut,
    duration: 1000,
    delay: 1000,
    fill: "none",
    scale: 1,
    height,
    width,
    loop: true,
    reverse: false,
    stop: States.PLAY
  };
  
  constructor(props) {
    super(props);
    const { d, reverse, length} = this.props;
    //const properties = svgPathProperties(d)
    this.length = length ? length: 1000;
    this.strokeDashoffset = new Animated.Value(!reverse ? this.length : 0);
    this.strokeListener = this.strokeDashoffset.addListener((value) => this.currentStrokeValue = value);
  }


  animate = () => {
    const {
      delay,
      duration,
      loop,
      easing = 'linear',
      reverse,
      state
    } = this.props;

    if(state == States.PAUSE)
      return;

    else if(state == States.PLAY){
      this.strokeDashoffset.setValue(!reverse ? this.length : 0);
      Animated.sequence([
        Animated.delay(delay),
        Animated.timing(this.strokeDashoffset, {
          toValue: !reverse ? 0 : this.length + 40,
          duration: duration,
          easing: Easing[easing],
          useNativeDriver: true,
        })
      ]).start(() => {
        if (loop) {
            this.animate();
        }
      });
    }else if(state == States.RESUME){
      const remaining = this.props.length - this.currentStrokeValue.value

      const remainingDuration = duration - (duration * remaining /this.length)
      Animated.sequence([
        Animated.timing(this.strokeDashoffset, {
          toValue: !reverse ? 0 : this.length,
          duration: remainingDuration,
          easing: Easing[easing],
          useNativeDriver: true,
        })
      ]).start(() => {

      });
    }

  }

  componentDidMount() {
    const {
      state
    } = this.props;
    if(state != States.PAUSE )
      this.animate();
  }

  componentWillUnmount(){
    this.strokeDashoffset.removeAllListeners();
  }

  componentDidUpdate(){
    const {
      state
    } = this.props;

    if(state == States.PAUSE){
      let val = ""
      this.strokeDashoffset.stopAnimation((value)=>{
        val = value
        console.log(`stopped animation with the following value ${value} and listner value is ${JSON.stringify(this.currentStrokeValue)}`)
      } );
      
    }  else{
      console.log(`play offset should be ${this.currentStrokeValue}`)
      this.animate()
    }  
  }
  
  render() {
    const {
      d,
      fill,
      scale,
      width,
      height,
      strokeColor,
      strokeWidth,
      strokeLinecap,
      strokeDashArray: dashArray,
      transform,

    } = this.props;


    return (

        <Path
          strokeDasharray={ dashArray || [this.length, this.length] }
          strokeDashoffset={this.strokeDashoffset}
          strokeWidth={strokeWidth}
          strokeLinecap={strokeLinecap}
          stroke={strokeColor}
          scale={scale}
          fill={fill}
          transform={transform}
          d={d}
        />

    );
  }
}

/* Export ==================================================================== */

module.exports = AnimatedSVGPath;
module.exports.details = {
  title: 'AnimatedSVGPath',
};
